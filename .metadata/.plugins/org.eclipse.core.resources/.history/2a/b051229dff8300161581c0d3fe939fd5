import java.util.*;
public class Level2 {

	public static void main(String[] args) {
		String n = "987654321";
		int len = n.length();
//		System.out.println("length is " + len);
		int base = 3;
		int counter = 0;
		int output = 0;
		boolean repeat = false;
		List<Integer> values = new ArrayList<Integer>();
		values.add(0, Integer.parseInt(n));
		while (counter < 30){
			counter++;
			List<Long> digits = digitToArray(n, len, base);
			int anwser = Rem(digits, len);
			values.add(anwser);
			n = Long.toString(values.get(values.size()-1));
			for (int i=0; i < values.size()-1 ; i++){
				if ((int) values.get(i) == (int) values.get(values.size()-1)){
					output = values.size() - 2 - i;
					repeat = true;
				}
			}
		}
//		System.out.println(Arrays.toString(values.toArray()));
//		System.out.println(output);
	}
	
	public static List<Long> digitToArray(String n, int len, int base) {
		long start = Long.parseLong(n);
		String basenum = Long.toString(start,base); 
		System.out.println("base num is " + basenum);
		long id = Long.parseLong(basenum);
		List<Long> digits = new LinkedList<Long>(); 
		while (id > 0) {
		    digits.add(0,id%10);
		    id = id/10;
		}
		if (digits.size() < len){
			for (int i= digits.size(); i <= len -1; i++){
				digits.add(i,(long) 0);
			}
		}
		return digits;
	}

	
	public static int Rem(List<Long> digits , int len) {
//		System.out.println(Arrays.toString(digits.toArray()));
		List<Long> digits2 = new ArrayList<Long>();
		for (Long item : digits) {
			digits2.add(item);
		}
		Collections.sort(digits);
		Collections.sort(digits2, Collections.reverseOrder());
		String xval = "";
		String yval = "";
		for (int i = 0;i < len; i++) {
			xval = xval + (digits.get(i));
			yval = yval + (digits2.get(i));
		}
//		System.out.println(Arrays.toString(digits.toArray()));
//		System.out.println(Arrays.toString(digits2.toArray()));
		System.out.println("yval is " + yval + " xval is " + xval);
		int answer = Integer.parseInt(yval, 10) - Integer.parseInt(xval,10);
		System.out.println("anwser is " + answer);
		return answer;
	}
	
}
