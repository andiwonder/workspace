package fractional_knapsack;
import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;


public class FractionalKnapsack {
	
	private static double getOptimalValue(int capacity, int[] values, int[] weights) {
        double value = 0;
        double [] val_per_weight = new double [values.length];
        Map<String, Integer> map = new HashMap<String, Integer>();
        //write your code here
        for (int i = 0; i < values.length; i++) {
        	val_per_weight[i] = weights[i] / values[i] ;
        	map.put(d[i], i);
        }
        
        for (int i = values.length - 1; i >= 0; i--) {
        	System.out.println(val_per_weight[i]);
        }
        return value;
    }
    
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int capacity = scanner.nextInt();
        int[] values = new int[n];
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
            weights[i] = scanner.nextInt();
        }
        System.out.println(getOptimalValue(capacity, values, weights));
    }
} 
